--- drbd_sender.c
+++ /tmp/cocci-output-200595-a717b9-drbd_sender.c
@@ -23,7 +23,6 @@
 #include <linux/random.h>
 #include <linux/scatterlist.h>
 #include <linux/overflow.h>
-#include <linux/part_stat.h>
 
 #include "drbd_int.h"
 #include "drbd_protocol.h"
--- drbd_receiver.c
+++ /tmp/cocci-output-200595-7a6b04-drbd_receiver.c
@@ -32,7 +32,6 @@
 #include <linux/random.h>
 #include <net/ipv6.h>
 #include <linux/scatterlist.h>
-#include <linux/part_stat.h>
 
 #include "drbd_int.h"
 #include "drbd_protocol.h"
--- drbd_main.c
+++ /tmp/cocci-output-200595-9ed82e-drbd_main.c
@@ -3710,7 +3710,7 @@ enum drbd_ret_code drbd_create_device(st
 
 	init_rwsem(&device->uuid_sem);
 
-	q = blk_alloc_queue(drbd_make_request, NUMA_NO_NODE);
+	q = blk_alloc_queue(GFP_KERNEL);
 	if (!q)
 		goto out_no_q;
 	device->rq_queue = q;
@@ -3734,6 +3734,7 @@ enum drbd_ret_code drbd_create_device(st
 
 	init_bdev_info(q->backing_dev_info, drbd_congested, device);
 
+	blk_queue_make_request(q, drbd_make_request);
 	blk_queue_write_cache(q, true, true);
 
 	device->md_io.page = alloc_page(GFP_KERNEL);
--- drbd_req.c
+++ /tmp/cocci-output-200595-9080be-drbd_req.c
@@ -416,7 +416,9 @@ void drbd_req_complete(struct drbd_reque
 		start_new_tl_epoch(device->resource);
 
 	/* Update disk stats */
-	bio_end_io_acct(req->master_bio, req->start_jif);
+	generic_end_io_acct(req->device->rq_queue,
+			    bio_data_dir(req->master_bio),
+			    &req->device->vdisk->part0, req->start_jif);
 
 	/* If READ failed,
 	 * have it be pushed back to the retry work queue,
@@ -1552,7 +1554,10 @@ drbd_request_prepare(struct drbd_device
 	}
 
 	/* Update disk stats */
-	req->start_jif = bio_start_io_acct(req->master_bio);
+	req->start_jif = start_jif;
+	generic_start_io_acct(req->device->rq_queue,
+			      bio_data_dir(req->master_bio), req->i.size >> 9,
+			      &req->device->vdisk->part0);
 
 	if (get_ldev(device))
 		req_make_private_bio(req, bio);
--- drbd_debugfs.c
+++ /tmp/cocci-output-200595-33e3de-drbd_debugfs.c
@@ -1716,6 +1716,9 @@ static const struct file_operations drbd
 
 static int drbd_compat_show(struct seq_file *m, void *ignored)
 {
+	seq_puts(m, "blk_queue_make_request__yes_present\n");
+	seq_puts(m, "bio_start_io_acct__no_present\n");
+	seq_puts(m, "part_stat_h__no_present\n");
 	return 0;
 }
 
